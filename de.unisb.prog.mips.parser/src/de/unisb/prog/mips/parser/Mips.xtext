grammar de.unisb.prog.mips.parser.Mips // with org.eclipse.xtext.common.Terminals

generate mips "http://www.unisb.de/prog/mips/parser/Mips"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore 

Asm hidden(COMMENT,WHITE,NL):  (elem+=DataSegment | elem+=TextSegment)*;

Directive: {Global} ".globl" label=[Label]
         | {SetAt} ".set" ID
         ;

TextSegment: ".text" (addr=PNInt)? (items+=TextItem | items+=Directive)+ ;
TextItem:    label=(Label)? item=(Insn | Align | Word);

Insn hidden(COMMENT,WHITE): opcode=ID (regs+=Reg)* (addr=Addr ('(' base=Reg ')')?)? NL;
	
Reg: (INTREG | TXTREG);

Addr:  label=[Label] ("+"|"-") expr=CExpr | label=[Label] | expr=CExpr;
CExpr returns Expression: Mult (({Plus.left=current} '+'| {Minus.left=current} '-') right=Mult)*;
Mult  returns Expression: Prim (({Mul.left=current} '*' | {Shra.left=current} ">>" | {Shr.left=current} ">>>" | {Shl.left=current} "<<") right=Prim)*;
Prim  returns Expression: '(' CExpr ')' | {Const} cnst=PNInt;
	
DataSegment: ".data" (addr=PNInt)? (items+=DataItem | items+=Directive)+ ;

DataItem: label=(Label)? data=DataDecl;
	
DataDecl : item=(Str | Align | Space | Byte | Half | Word);
	
Label:       ^name=ID ':' ;
Align:       ".align" (align=INT) ;
Space:       ".space" (bytes=INT);
Word:        ".word" vals=AddrList;
Half:        ".half" vals=IntList;
Byte:        ".byte" vals=IntList;
Str:         ({Asciiz} ".asciiz" | {Ascii} ".ascii") val=STRING;

IntList:     vals+=PNInt (',' vals+=PNInt)*;
AddrList:    vals+=Addr (',' vals+=Addr)*;

PNInt returns ecore::EInt: ('-')? (INT | HEXINT);
	
terminal INTREG   : '$' ('0'..'9')+;
terminal TXTREG   : '$' ('a'..'z') ('a'..'z'|'0'..'9')+;
terminal COMMENT  : (';'|'#') !('\n'|'\r')* ('\r'? '\n') ;
terminal WHITE    : (' '|'\t')+;
terminal NL       : ('\r'|'\n')+;

terminal ID       : '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
terminal INT returns ecore::EInt: ('0'..'9')+;
terminal HEXINT returns ecore::EInt: '0' 'x' ('0'..'9'|'a'..'f'|'A'..'F')+;
terminal STRING	  : '"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|'"') )* '"' 
                  | "'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|"'") )* "'" ; 
	
