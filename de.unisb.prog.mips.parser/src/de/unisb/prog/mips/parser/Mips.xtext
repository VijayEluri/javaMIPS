grammar de.unisb.prog.mips.parser.Mips with org.eclipse.xtext.common.Terminals

generate mips "http://www.unisb.de/prog/mips/parser/Mips"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore 


Asm hidden(WHITE, COMMENT): (elem+=DataSegment | elem+=TextSegment)*;
TextSegment:      ".text"  NL (items+=TextItem)+ ;
TextItem:         Label=(Label)? (NL)? item=(Insn | Align | Word) NL;

Insn:           form=(RForm | IArithForm | IAddrForm | IBranchForm | JExpForm | JLabelForm | SyscallForm);
	
RForm:          opcode=ID rd=Reg rs=Reg rt=Reg;
	
IArithForm:     opcode=ID rt=Reg rs=Reg imm=PNInt;
IAddrForm:      opcode=ID rt=Reg addr=Addr ('(' rs=Reg ')')?;
IBranchForm:    opcode=ID rt=Reg rs=Reg label=[Label];

JExpForm:       opcode=ID addr=INT;
JLabelForm:     opcode=ID label=[Label];
SyscallForm:    opcode=ID;
	
Reg: (INTREG | TXTREG);

Addr:  label=[Label] ("+"|"-") expr=CExpr | label=[Label] | expr=CExpr;
CExpr returns Expression: Mult (({Plus.left=current} '+'| {Minus.left=current} '-') right=Mult)*;
Mult  returns Expression: Prim (({Mul.left=current} '*' {Shr.left=current} ">>" | {Shl.left=current} "<<") right=Prim)*;
Prim  returns Expression: '(' CExpr ')' | {Const} cnst=PNInt;
	
DataSegment: ".data" NL {DataSegment} (items+=DataItem)* ;

DataItem: label=(Label)? data=DataDecl NL;
	
DataDecl
	: item=(Str
	| Align
	| Space
	| Byte
	| Half 
	| Word);
	
Label:       ^name=ID ':' ;
Align:       ".align" (align=INT) ;
Space:       ".space" (bytes=INT);
Word:        ".word" val=IntList ;
Half:        ".half" val=IntList ;
Byte:        ".byte" val=IntList ;
Str:         (".asciiz" | ".ascii") val=STRING;

IntList:     vals+=PNInt (',' vals+=PNInt)*;
PNInt returns ecore::EInt:       ('-')? INT;
	
terminal INTREG   : '$' ('0'..'9')+;
terminal TXTREG   : '$' ('a'..'z') ('a'..'z'|'0'..'9')+;
terminal COMMENT  : (';'|'#') !('\n'|'\r')* ('\r'? '\n')* ;
terminal WHITE    : (' '|'\t')+;
terminal NL       : (('\r'|'\n') WHITE*)+;

	
