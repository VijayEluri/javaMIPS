/*
* generated by Xtext
*/

package de.unisb.prog.mips.asm.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MipsGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class AsmElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Asm");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cElemAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cElemDataSegmentParserRuleCall_0_0 = (RuleCall)cElemAssignment_0.eContents().get(0);
		private final Assignment cElemAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cElemTextSegmentParserRuleCall_1_0 = (RuleCall)cElemAssignment_1.eContents().get(0);
		
		//Asm hidden(WS, COMMENT):
		//	elem+=DataSegment | elem+=TextSegment;
		public ParserRule getRule() { return rule; }

		//elem+=DataSegment | elem+=TextSegment
		public Alternatives getAlternatives() { return cAlternatives; }

		//elem+=DataSegment
		public Assignment getElemAssignment_0() { return cElemAssignment_0; }

		//DataSegment
		public RuleCall getElemDataSegmentParserRuleCall_0_0() { return cElemDataSegmentParserRuleCall_0_0; }

		//elem+=TextSegment
		public Assignment getElemAssignment_1() { return cElemAssignment_1; }

		//TextSegment
		public RuleCall getElemTextSegmentParserRuleCall_1_0() { return cElemTextSegmentParserRuleCall_1_0; }
	}

	public class TextSegmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextSegment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cTextSegmentAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cItemsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cItemsTextItemParserRuleCall_2_0 = (RuleCall)cItemsAssignment_2.eContents().get(0);
		
		//TextSegment:
		//	".text" {TextSegment} items+=TextItem*;
		public ParserRule getRule() { return rule; }

		//".text" {TextSegment} items+=TextItem*
		public Group getGroup() { return cGroup; }

		//".text"
		public Keyword getTextKeyword_0() { return cTextKeyword_0; }

		//{TextSegment}
		public Action getTextSegmentAction_1() { return cTextSegmentAction_1; }

		//items+=TextItem*
		public Assignment getItemsAssignment_2() { return cItemsAssignment_2; }

		//TextItem
		public RuleCall getItemsTextItemParserRuleCall_2_0() { return cItemsTextItemParserRuleCall_2_0; }
	}

	public class TextItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLabelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLabelLabelParserRuleCall_0_0 = (RuleCall)cLabelAssignment_0.eContents().get(0);
		private final Assignment cItemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cItemAlternatives_1_0 = (Alternatives)cItemAssignment_1.eContents().get(0);
		private final RuleCall cItemInstructionParserRuleCall_1_0_0 = (RuleCall)cItemAlternatives_1_0.eContents().get(0);
		private final RuleCall cItemSpecialInsnParserRuleCall_1_0_1 = (RuleCall)cItemAlternatives_1_0.eContents().get(1);
		private final RuleCall cItemAlignParserRuleCall_1_0_2 = (RuleCall)cItemAlternatives_1_0.eContents().get(2);
		private final RuleCall cItemWordParserRuleCall_1_0_3 = (RuleCall)cItemAlternatives_1_0.eContents().get(3);
		
		//TextItem:
		//	Label=Label? item=(Instruction | SpecialInsn | Align | Word);
		public ParserRule getRule() { return rule; }

		//Label=Label? item=(Instruction | SpecialInsn | Align | Word)
		public Group getGroup() { return cGroup; }

		//Label=Label?
		public Assignment getLabelAssignment_0() { return cLabelAssignment_0; }

		//Label
		public RuleCall getLabelLabelParserRuleCall_0_0() { return cLabelLabelParserRuleCall_0_0; }

		//item=(Instruction | SpecialInsn | Align | Word)
		public Assignment getItemAssignment_1() { return cItemAssignment_1; }

		//Instruction | SpecialInsn | Align | Word
		public Alternatives getItemAlternatives_1_0() { return cItemAlternatives_1_0; }

		//Instruction
		public RuleCall getItemInstructionParserRuleCall_1_0_0() { return cItemInstructionParserRuleCall_1_0_0; }

		//SpecialInsn
		public RuleCall getItemSpecialInsnParserRuleCall_1_0_1() { return cItemSpecialInsnParserRuleCall_1_0_1; }

		//Align
		public RuleCall getItemAlignParserRuleCall_1_0_2() { return cItemAlignParserRuleCall_1_0_2; }

		//Word
		public RuleCall getItemWordParserRuleCall_1_0_3() { return cItemWordParserRuleCall_1_0_3; }
	}

	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Instruction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpcodeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpcodeIDTerminalRuleCall_0_0 = (RuleCall)cOpcodeAssignment_0.eContents().get(0);
		private final Assignment cFormAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cFormAlternatives_1_0 = (Alternatives)cFormAssignment_1.eContents().get(0);
		private final RuleCall cFormRFormParserRuleCall_1_0_0 = (RuleCall)cFormAlternatives_1_0.eContents().get(0);
		private final RuleCall cFormIArithFormParserRuleCall_1_0_1 = (RuleCall)cFormAlternatives_1_0.eContents().get(1);
		private final RuleCall cFormIExpFormParserRuleCall_1_0_2 = (RuleCall)cFormAlternatives_1_0.eContents().get(2);
		private final RuleCall cFormILabelFormParserRuleCall_1_0_3 = (RuleCall)cFormAlternatives_1_0.eContents().get(3);
		private final RuleCall cFormIBr2FormParserRuleCall_1_0_4 = (RuleCall)cFormAlternatives_1_0.eContents().get(4);
		private final RuleCall cFormBExpFormParserRuleCall_1_0_5 = (RuleCall)cFormAlternatives_1_0.eContents().get(5);
		private final RuleCall cFormBLabelFormParserRuleCall_1_0_6 = (RuleCall)cFormAlternatives_1_0.eContents().get(6);
		
		//Instruction:
		//	opcode=ID form=(RForm | IArithForm | IExpForm | ILabelForm | IBr2Form | BExpForm | BLabelForm);
		public ParserRule getRule() { return rule; }

		//opcode=ID form=(RForm | IArithForm | IExpForm | ILabelForm | IBr2Form | BExpForm | BLabelForm)
		public Group getGroup() { return cGroup; }

		//opcode=ID
		public Assignment getOpcodeAssignment_0() { return cOpcodeAssignment_0; }

		//ID
		public RuleCall getOpcodeIDTerminalRuleCall_0_0() { return cOpcodeIDTerminalRuleCall_0_0; }

		//form=(RForm | IArithForm | IExpForm | ILabelForm | IBr2Form | BExpForm | BLabelForm)
		public Assignment getFormAssignment_1() { return cFormAssignment_1; }

		//RForm | IArithForm | IExpForm | ILabelForm | IBr2Form | BExpForm | BLabelForm
		public Alternatives getFormAlternatives_1_0() { return cFormAlternatives_1_0; }

		//RForm
		public RuleCall getFormRFormParserRuleCall_1_0_0() { return cFormRFormParserRuleCall_1_0_0; }

		//IArithForm
		public RuleCall getFormIArithFormParserRuleCall_1_0_1() { return cFormIArithFormParserRuleCall_1_0_1; }

		//IExpForm
		public RuleCall getFormIExpFormParserRuleCall_1_0_2() { return cFormIExpFormParserRuleCall_1_0_2; }

		//ILabelForm
		public RuleCall getFormILabelFormParserRuleCall_1_0_3() { return cFormILabelFormParserRuleCall_1_0_3; }

		//IBr2Form
		public RuleCall getFormIBr2FormParserRuleCall_1_0_4() { return cFormIBr2FormParserRuleCall_1_0_4; }

		//BExpForm
		public RuleCall getFormBExpFormParserRuleCall_1_0_5() { return cFormBExpFormParserRuleCall_1_0_5; }

		//BLabelForm
		public RuleCall getFormBLabelFormParserRuleCall_1_0_6() { return cFormBLabelFormParserRuleCall_1_0_6; }
	}

	public class RFormElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RForm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRtAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRtRegParserRuleCall_0_0 = (RuleCall)cRtAssignment_0.eContents().get(0);
		private final Assignment cRsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRsRegParserRuleCall_1_0 = (RuleCall)cRsAssignment_1.eContents().get(0);
		private final Assignment cRdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRdRegParserRuleCall_2_0 = (RuleCall)cRdAssignment_2.eContents().get(0);
		private final Assignment cShamtAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cShamtINTTerminalRuleCall_3_0 = (RuleCall)cShamtAssignment_3.eContents().get(0);
		
		//RForm:
		//	rt=Reg rs=Reg rd=Reg shamt=INT?;
		public ParserRule getRule() { return rule; }

		//rt=Reg rs=Reg rd=Reg shamt=INT?
		public Group getGroup() { return cGroup; }

		//rt=Reg
		public Assignment getRtAssignment_0() { return cRtAssignment_0; }

		//Reg
		public RuleCall getRtRegParserRuleCall_0_0() { return cRtRegParserRuleCall_0_0; }

		//rs=Reg
		public Assignment getRsAssignment_1() { return cRsAssignment_1; }

		//Reg
		public RuleCall getRsRegParserRuleCall_1_0() { return cRsRegParserRuleCall_1_0; }

		//rd=Reg
		public Assignment getRdAssignment_2() { return cRdAssignment_2; }

		//Reg
		public RuleCall getRdRegParserRuleCall_2_0() { return cRdRegParserRuleCall_2_0; }

		//shamt=INT?
		public Assignment getShamtAssignment_3() { return cShamtAssignment_3; }

		//INT
		public RuleCall getShamtINTTerminalRuleCall_3_0() { return cShamtINTTerminalRuleCall_3_0; }
	}

	public class IArithFormElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IArithForm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRtAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRtRegParserRuleCall_0_0 = (RuleCall)cRtAssignment_0.eContents().get(0);
		private final Assignment cRsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRsRegParserRuleCall_1_0 = (RuleCall)cRsAssignment_1.eContents().get(0);
		private final Assignment cImmAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImmPNIntParserRuleCall_2_0 = (RuleCall)cImmAssignment_2.eContents().get(0);
		
		//IArithForm:
		//	rt=Reg rs=Reg imm=PNInt;
		public ParserRule getRule() { return rule; }

		//rt=Reg rs=Reg imm=PNInt
		public Group getGroup() { return cGroup; }

		//rt=Reg
		public Assignment getRtAssignment_0() { return cRtAssignment_0; }

		//Reg
		public RuleCall getRtRegParserRuleCall_0_0() { return cRtRegParserRuleCall_0_0; }

		//rs=Reg
		public Assignment getRsAssignment_1() { return cRsAssignment_1; }

		//Reg
		public RuleCall getRsRegParserRuleCall_1_0() { return cRsRegParserRuleCall_1_0; }

		//imm=PNInt
		public Assignment getImmAssignment_2() { return cImmAssignment_2; }

		//PNInt
		public RuleCall getImmPNIntParserRuleCall_2_0() { return cImmPNIntParserRuleCall_2_0; }
	}

	public class IExpFormElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IExpForm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRtAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRtRegParserRuleCall_0_0 = (RuleCall)cRtAssignment_0.eContents().get(0);
		private final Assignment cImmAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImmPNIntParserRuleCall_1_0 = (RuleCall)cImmAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRsRegParserRuleCall_3_0 = (RuleCall)cRsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//IExpForm:
		//	rt=Reg imm=PNInt "(" rs=Reg ")";
		public ParserRule getRule() { return rule; }

		//rt=Reg imm=PNInt "(" rs=Reg ")"
		public Group getGroup() { return cGroup; }

		//rt=Reg
		public Assignment getRtAssignment_0() { return cRtAssignment_0; }

		//Reg
		public RuleCall getRtRegParserRuleCall_0_0() { return cRtRegParserRuleCall_0_0; }

		//imm=PNInt
		public Assignment getImmAssignment_1() { return cImmAssignment_1; }

		//PNInt
		public RuleCall getImmPNIntParserRuleCall_1_0() { return cImmPNIntParserRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//rs=Reg
		public Assignment getRsAssignment_3() { return cRsAssignment_3; }

		//Reg
		public RuleCall getRsRegParserRuleCall_3_0() { return cRsRegParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ILabelFormElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ILabelForm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRegAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRegRegParserRuleCall_0_0 = (RuleCall)cRegAssignment_0.eContents().get(0);
		private final Assignment cLabelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cLabelLabelCrossReference_1_0 = (CrossReference)cLabelAssignment_1.eContents().get(0);
		private final RuleCall cLabelLabelIDTerminalRuleCall_1_0_1 = (RuleCall)cLabelLabelCrossReference_1_0.eContents().get(1);
		
		//ILabelForm:
		//	reg=Reg label=[Label];
		public ParserRule getRule() { return rule; }

		//reg=Reg label=[Label]
		public Group getGroup() { return cGroup; }

		//reg=Reg
		public Assignment getRegAssignment_0() { return cRegAssignment_0; }

		//Reg
		public RuleCall getRegRegParserRuleCall_0_0() { return cRegRegParserRuleCall_0_0; }

		//label=[Label]
		public Assignment getLabelAssignment_1() { return cLabelAssignment_1; }

		//[Label]
		public CrossReference getLabelLabelCrossReference_1_0() { return cLabelLabelCrossReference_1_0; }

		//ID
		public RuleCall getLabelLabelIDTerminalRuleCall_1_0_1() { return cLabelLabelIDTerminalRuleCall_1_0_1; }
	}

	public class IBr2FormElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IBr2Form");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRtAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRtRegParserRuleCall_0_0 = (RuleCall)cRtAssignment_0.eContents().get(0);
		private final Assignment cRsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRsRegParserRuleCall_1_0 = (RuleCall)cRsAssignment_1.eContents().get(0);
		private final Assignment cLabelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cLabelLabelCrossReference_2_0 = (CrossReference)cLabelAssignment_2.eContents().get(0);
		private final RuleCall cLabelLabelIDTerminalRuleCall_2_0_1 = (RuleCall)cLabelLabelCrossReference_2_0.eContents().get(1);
		
		//IBr2Form:
		//	rt=Reg rs=Reg label=[Label];
		public ParserRule getRule() { return rule; }

		//rt=Reg rs=Reg label=[Label]
		public Group getGroup() { return cGroup; }

		//rt=Reg
		public Assignment getRtAssignment_0() { return cRtAssignment_0; }

		//Reg
		public RuleCall getRtRegParserRuleCall_0_0() { return cRtRegParserRuleCall_0_0; }

		//rs=Reg
		public Assignment getRsAssignment_1() { return cRsAssignment_1; }

		//Reg
		public RuleCall getRsRegParserRuleCall_1_0() { return cRsRegParserRuleCall_1_0; }

		//label=[Label]
		public Assignment getLabelAssignment_2() { return cLabelAssignment_2; }

		//[Label]
		public CrossReference getLabelLabelCrossReference_2_0() { return cLabelLabelCrossReference_2_0; }

		//ID
		public RuleCall getLabelLabelIDTerminalRuleCall_2_0_1() { return cLabelLabelIDTerminalRuleCall_2_0_1; }
	}

	public class BExpFormElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BExpForm");
		private final Assignment cAddrAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cAddrINTTerminalRuleCall_0 = (RuleCall)cAddrAssignment.eContents().get(0);
		
		//BExpForm:
		//	addr=INT;
		public ParserRule getRule() { return rule; }

		//addr=INT
		public Assignment getAddrAssignment() { return cAddrAssignment; }

		//INT
		public RuleCall getAddrINTTerminalRuleCall_0() { return cAddrINTTerminalRuleCall_0; }
	}

	public class BLabelFormElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BLabelForm");
		private final Assignment cLabelAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cLabelLabelCrossReference_0 = (CrossReference)cLabelAssignment.eContents().get(0);
		private final RuleCall cLabelLabelIDTerminalRuleCall_0_1 = (RuleCall)cLabelLabelCrossReference_0.eContents().get(1);
		
		//BLabelForm:
		//	label=[Label];
		public ParserRule getRule() { return rule; }

		//label=[Label]
		public Assignment getLabelAssignment() { return cLabelAssignment; }

		//[Label]
		public CrossReference getLabelLabelCrossReference_0() { return cLabelLabelCrossReference_0; }

		//ID
		public RuleCall getLabelLabelIDTerminalRuleCall_0_1() { return cLabelLabelIDTerminalRuleCall_0_1; }
	}

	public class SpecialInsnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SpecialInsn");
		private final Assignment cInsnAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cInsnAlternatives_0 = (Alternatives)cInsnAssignment.eContents().get(0);
		private final RuleCall cInsnLoadAddressParserRuleCall_0_0 = (RuleCall)cInsnAlternatives_0.eContents().get(0);
		private final RuleCall cInsnLoadConstantParserRuleCall_0_1 = (RuleCall)cInsnAlternatives_0.eContents().get(1);
		
		//SpecialInsn:
		//	insn=(LoadAddress | LoadConstant);
		public ParserRule getRule() { return rule; }

		//insn=(LoadAddress | LoadConstant)
		public Assignment getInsnAssignment() { return cInsnAssignment; }

		//LoadAddress | LoadConstant
		public Alternatives getInsnAlternatives_0() { return cInsnAlternatives_0; }

		//LoadAddress
		public RuleCall getInsnLoadAddressParserRuleCall_0_0() { return cInsnLoadAddressParserRuleCall_0_0; }

		//LoadConstant
		public RuleCall getInsnLoadConstantParserRuleCall_0_1() { return cInsnLoadConstantParserRuleCall_0_1; }
	}

	public class LoadConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LoadConstant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLiKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRtAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRtRegParserRuleCall_1_0 = (RuleCall)cRtAssignment_1.eContents().get(0);
		private final Assignment cValAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValINTTerminalRuleCall_2_0 = (RuleCall)cValAssignment_2.eContents().get(0);
		
		//LoadConstant:
		//	"li" rt=Reg val=INT;
		public ParserRule getRule() { return rule; }

		//"li" rt=Reg val=INT
		public Group getGroup() { return cGroup; }

		//"li"
		public Keyword getLiKeyword_0() { return cLiKeyword_0; }

		//rt=Reg
		public Assignment getRtAssignment_1() { return cRtAssignment_1; }

		//Reg
		public RuleCall getRtRegParserRuleCall_1_0() { return cRtRegParserRuleCall_1_0; }

		//val=INT
		public Assignment getValAssignment_2() { return cValAssignment_2; }

		//INT
		public RuleCall getValINTTerminalRuleCall_2_0() { return cValINTTerminalRuleCall_2_0; }
	}

	public class LoadAddressElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LoadAddress");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRtAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRtRegParserRuleCall_1_0 = (RuleCall)cRtAssignment_1.eContents().get(0);
		private final Assignment cLabelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cLabelLabelCrossReference_2_0 = (CrossReference)cLabelAssignment_2.eContents().get(0);
		private final RuleCall cLabelLabelIDTerminalRuleCall_2_0_1 = (RuleCall)cLabelLabelCrossReference_2_0.eContents().get(1);
		
		//LoadAddress:
		//	"la" rt=Reg label=[Label];
		public ParserRule getRule() { return rule; }

		//"la" rt=Reg label=[Label]
		public Group getGroup() { return cGroup; }

		//"la"
		public Keyword getLaKeyword_0() { return cLaKeyword_0; }

		//rt=Reg
		public Assignment getRtAssignment_1() { return cRtAssignment_1; }

		//Reg
		public RuleCall getRtRegParserRuleCall_1_0() { return cRtRegParserRuleCall_1_0; }

		//label=[Label]
		public Assignment getLabelAssignment_2() { return cLabelAssignment_2; }

		//[Label]
		public CrossReference getLabelLabelCrossReference_2_0() { return cLabelLabelCrossReference_2_0; }

		//ID
		public RuleCall getLabelLabelIDTerminalRuleCall_2_0_1() { return cLabelLabelIDTerminalRuleCall_2_0_1; }
	}

	public class RegElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Reg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDollarSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cNumAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cNumINTTerminalRuleCall_1_0_0 = (RuleCall)cNumAssignment_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		
		//Reg:
		//	"$" (num=INT | name=ID);
		public ParserRule getRule() { return rule; }

		//"$" (num=INT | name=ID)
		public Group getGroup() { return cGroup; }

		//"$"
		public Keyword getDollarSignKeyword_0() { return cDollarSignKeyword_0; }

		//num=INT | name=ID
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//num=INT
		public Assignment getNumAssignment_1_0() { return cNumAssignment_1_0; }

		//INT
		public RuleCall getNumINTTerminalRuleCall_1_0_0() { return cNumINTTerminalRuleCall_1_0_0; }

		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
	}

	public class DataSegmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataSegment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cDataSegmentAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cItemsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cItemsDataItemParserRuleCall_2_0 = (RuleCall)cItemsAssignment_2.eContents().get(0);
		
		//DataSegment:
		//	".data" {DataSegment} items+=DataItem*;
		public ParserRule getRule() { return rule; }

		//".data" {DataSegment} items+=DataItem*
		public Group getGroup() { return cGroup; }

		//".data"
		public Keyword getDataKeyword_0() { return cDataKeyword_0; }

		//{DataSegment}
		public Action getDataSegmentAction_1() { return cDataSegmentAction_1; }

		//items+=DataItem*
		public Assignment getItemsAssignment_2() { return cItemsAssignment_2; }

		//DataItem
		public RuleCall getItemsDataItemParserRuleCall_2_0() { return cItemsDataItemParserRuleCall_2_0; }
	}

	public class DataItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLabelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLabelLabelParserRuleCall_0_0 = (RuleCall)cLabelAssignment_0.eContents().get(0);
		private final Assignment cDataAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDataDataDeclParserRuleCall_1_0 = (RuleCall)cDataAssignment_1.eContents().get(0);
		
		//DataItem:
		//	label=Label? data=DataDecl;
		public ParserRule getRule() { return rule; }

		//label=Label? data=DataDecl
		public Group getGroup() { return cGroup; }

		//label=Label?
		public Assignment getLabelAssignment_0() { return cLabelAssignment_0; }

		//Label
		public RuleCall getLabelLabelParserRuleCall_0_0() { return cLabelLabelParserRuleCall_0_0; }

		//data=DataDecl
		public Assignment getDataAssignment_1() { return cDataAssignment_1; }

		//DataDecl
		public RuleCall getDataDataDeclParserRuleCall_1_0() { return cDataDataDeclParserRuleCall_1_0; }
	}

	public class DataDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataDecl");
		private final Assignment cItemAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cItemAlternatives_0 = (Alternatives)cItemAssignment.eContents().get(0);
		private final RuleCall cItemStrParserRuleCall_0_0 = (RuleCall)cItemAlternatives_0.eContents().get(0);
		private final RuleCall cItemAlignParserRuleCall_0_1 = (RuleCall)cItemAlternatives_0.eContents().get(1);
		private final RuleCall cItemSpaceParserRuleCall_0_2 = (RuleCall)cItemAlternatives_0.eContents().get(2);
		private final RuleCall cItemByteParserRuleCall_0_3 = (RuleCall)cItemAlternatives_0.eContents().get(3);
		private final RuleCall cItemHalfParserRuleCall_0_4 = (RuleCall)cItemAlternatives_0.eContents().get(4);
		private final RuleCall cItemWordParserRuleCall_0_5 = (RuleCall)cItemAlternatives_0.eContents().get(5);
		
		//DataDecl:
		//	item=(Str | Align | Space | Byte | Half | Word);
		public ParserRule getRule() { return rule; }

		//item=(Str | Align | Space | Byte | Half | Word)
		public Assignment getItemAssignment() { return cItemAssignment; }

		//Str | Align | Space | Byte | Half | Word
		public Alternatives getItemAlternatives_0() { return cItemAlternatives_0; }

		//Str
		public RuleCall getItemStrParserRuleCall_0_0() { return cItemStrParserRuleCall_0_0; }

		//Align
		public RuleCall getItemAlignParserRuleCall_0_1() { return cItemAlignParserRuleCall_0_1; }

		//Space
		public RuleCall getItemSpaceParserRuleCall_0_2() { return cItemSpaceParserRuleCall_0_2; }

		//Byte
		public RuleCall getItemByteParserRuleCall_0_3() { return cItemByteParserRuleCall_0_3; }

		//Half
		public RuleCall getItemHalfParserRuleCall_0_4() { return cItemHalfParserRuleCall_0_4; }

		//Word
		public RuleCall getItemWordParserRuleCall_0_5() { return cItemWordParserRuleCall_0_5; }
	}

	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Label");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Label:
		//	name=ID ":";
		public ParserRule getRule() { return rule; }

		//name=ID ":"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
	}

	public class AlignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Align");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAlignAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAlignINTTerminalRuleCall_1_0 = (RuleCall)cAlignAssignment_1.eContents().get(0);
		
		//Align:
		//	".align" align=INT;
		public ParserRule getRule() { return rule; }

		//".align" align=INT
		public Group getGroup() { return cGroup; }

		//".align"
		public Keyword getAlignKeyword_0() { return cAlignKeyword_0; }

		//align=INT
		public Assignment getAlignAssignment_1() { return cAlignAssignment_1; }

		//INT
		public RuleCall getAlignINTTerminalRuleCall_1_0() { return cAlignINTTerminalRuleCall_1_0; }
	}

	public class SpaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Space");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSpaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBytesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBytesINTTerminalRuleCall_1_0 = (RuleCall)cBytesAssignment_1.eContents().get(0);
		
		//Space:
		//	".space" bytes=INT;
		public ParserRule getRule() { return rule; }

		//".space" bytes=INT
		public Group getGroup() { return cGroup; }

		//".space"
		public Keyword getSpaceKeyword_0() { return cSpaceKeyword_0; }

		//bytes=INT
		public Assignment getBytesAssignment_1() { return cBytesAssignment_1; }

		//INT
		public RuleCall getBytesINTTerminalRuleCall_1_0() { return cBytesINTTerminalRuleCall_1_0; }
	}

	public class WordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Word");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWordKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValIntListParserRuleCall_1_0 = (RuleCall)cValAssignment_1.eContents().get(0);
		
		//Word:
		//	".word" val=IntList;
		public ParserRule getRule() { return rule; }

		//".word" val=IntList
		public Group getGroup() { return cGroup; }

		//".word"
		public Keyword getWordKeyword_0() { return cWordKeyword_0; }

		//val=IntList
		public Assignment getValAssignment_1() { return cValAssignment_1; }

		//IntList
		public RuleCall getValIntListParserRuleCall_1_0() { return cValIntListParserRuleCall_1_0; }
	}

	public class HalfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Half");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHalfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValIntListParserRuleCall_1_0 = (RuleCall)cValAssignment_1.eContents().get(0);
		
		//Half:
		//	".half" val=IntList;
		public ParserRule getRule() { return rule; }

		//".half" val=IntList
		public Group getGroup() { return cGroup; }

		//".half"
		public Keyword getHalfKeyword_0() { return cHalfKeyword_0; }

		//val=IntList
		public Assignment getValAssignment_1() { return cValAssignment_1; }

		//IntList
		public RuleCall getValIntListParserRuleCall_1_0() { return cValIntListParserRuleCall_1_0; }
	}

	public class ByteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Byte");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cByteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValIntListParserRuleCall_1_0 = (RuleCall)cValAssignment_1.eContents().get(0);
		
		//Byte:
		//	".byte" val=IntList;
		public ParserRule getRule() { return rule; }

		//".byte" val=IntList
		public Group getGroup() { return cGroup; }

		//".byte"
		public Keyword getByteKeyword_0() { return cByteKeyword_0; }

		//val=IntList
		public Assignment getValAssignment_1() { return cValAssignment_1; }

		//IntList
		public RuleCall getValIntListParserRuleCall_1_0() { return cValIntListParserRuleCall_1_0; }
	}

	public class StrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Str");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cAsciizKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cAsciiKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cValAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValSTRINGTerminalRuleCall_1_0 = (RuleCall)cValAssignment_1.eContents().get(0);
		
		//Str:
		//	(".asciiz" | ".ascii") val=STRING;
		public ParserRule getRule() { return rule; }

		//(".asciiz" | ".ascii") val=STRING
		public Group getGroup() { return cGroup; }

		//".asciiz" | ".ascii"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//".asciiz"
		public Keyword getAsciizKeyword_0_0() { return cAsciizKeyword_0_0; }

		//".ascii"
		public Keyword getAsciiKeyword_0_1() { return cAsciiKeyword_0_1; }

		//val=STRING
		public Assignment getValAssignment_1() { return cValAssignment_1; }

		//STRING
		public RuleCall getValSTRINGTerminalRuleCall_1_0() { return cValSTRINGTerminalRuleCall_1_0; }
	}

	public class IntListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValsPNIntParserRuleCall_0_0 = (RuleCall)cValsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValsPNIntParserRuleCall_1_1_0 = (RuleCall)cValsAssignment_1_1.eContents().get(0);
		
		//IntList:
		//	vals+=PNInt ("," vals+=PNInt)*;
		public ParserRule getRule() { return rule; }

		//vals+=PNInt ("," vals+=PNInt)*
		public Group getGroup() { return cGroup; }

		//vals+=PNInt
		public Assignment getValsAssignment_0() { return cValsAssignment_0; }

		//PNInt
		public RuleCall getValsPNIntParserRuleCall_0_0() { return cValsPNIntParserRuleCall_0_0; }

		//("," vals+=PNInt)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//vals+=PNInt
		public Assignment getValsAssignment_1_1() { return cValsAssignment_1_1; }

		//PNInt
		public RuleCall getValsPNIntParserRuleCall_1_1_0() { return cValsPNIntParserRuleCall_1_1_0; }
	}

	public class PNIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PNInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//PNInt returns ecore::EInt:
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	
	private AsmElements pAsm;
	private TextSegmentElements pTextSegment;
	private TextItemElements pTextItem;
	private InstructionElements pInstruction;
	private RFormElements pRForm;
	private IArithFormElements pIArithForm;
	private IExpFormElements pIExpForm;
	private ILabelFormElements pILabelForm;
	private IBr2FormElements pIBr2Form;
	private BExpFormElements pBExpForm;
	private BLabelFormElements pBLabelForm;
	private SpecialInsnElements pSpecialInsn;
	private LoadConstantElements pLoadConstant;
	private LoadAddressElements pLoadAddress;
	private RegElements pReg;
	private DataSegmentElements pDataSegment;
	private DataItemElements pDataItem;
	private DataDeclElements pDataDecl;
	private LabelElements pLabel;
	private AlignElements pAlign;
	private SpaceElements pSpace;
	private WordElements pWord;
	private HalfElements pHalf;
	private ByteElements pByte;
	private StrElements pStr;
	private IntListElements pIntList;
	private PNIntElements pPNInt;
	private TerminalRule tCOMMENT;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public MipsGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Asm hidden(WS, COMMENT):
	//	elem+=DataSegment | elem+=TextSegment;
	public AsmElements getAsmAccess() {
		return (pAsm != null) ? pAsm : (pAsm = new AsmElements());
	}
	
	public ParserRule getAsmRule() {
		return getAsmAccess().getRule();
	}

	//TextSegment:
	//	".text" {TextSegment} items+=TextItem*;
	public TextSegmentElements getTextSegmentAccess() {
		return (pTextSegment != null) ? pTextSegment : (pTextSegment = new TextSegmentElements());
	}
	
	public ParserRule getTextSegmentRule() {
		return getTextSegmentAccess().getRule();
	}

	//TextItem:
	//	Label=Label? item=(Instruction | SpecialInsn | Align | Word);
	public TextItemElements getTextItemAccess() {
		return (pTextItem != null) ? pTextItem : (pTextItem = new TextItemElements());
	}
	
	public ParserRule getTextItemRule() {
		return getTextItemAccess().getRule();
	}

	//Instruction:
	//	opcode=ID form=(RForm | IArithForm | IExpForm | ILabelForm | IBr2Form | BExpForm | BLabelForm);
	public InstructionElements getInstructionAccess() {
		return (pInstruction != null) ? pInstruction : (pInstruction = new InstructionElements());
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}

	//RForm:
	//	rt=Reg rs=Reg rd=Reg shamt=INT?;
	public RFormElements getRFormAccess() {
		return (pRForm != null) ? pRForm : (pRForm = new RFormElements());
	}
	
	public ParserRule getRFormRule() {
		return getRFormAccess().getRule();
	}

	//IArithForm:
	//	rt=Reg rs=Reg imm=PNInt;
	public IArithFormElements getIArithFormAccess() {
		return (pIArithForm != null) ? pIArithForm : (pIArithForm = new IArithFormElements());
	}
	
	public ParserRule getIArithFormRule() {
		return getIArithFormAccess().getRule();
	}

	//IExpForm:
	//	rt=Reg imm=PNInt "(" rs=Reg ")";
	public IExpFormElements getIExpFormAccess() {
		return (pIExpForm != null) ? pIExpForm : (pIExpForm = new IExpFormElements());
	}
	
	public ParserRule getIExpFormRule() {
		return getIExpFormAccess().getRule();
	}

	//ILabelForm:
	//	reg=Reg label=[Label];
	public ILabelFormElements getILabelFormAccess() {
		return (pILabelForm != null) ? pILabelForm : (pILabelForm = new ILabelFormElements());
	}
	
	public ParserRule getILabelFormRule() {
		return getILabelFormAccess().getRule();
	}

	//IBr2Form:
	//	rt=Reg rs=Reg label=[Label];
	public IBr2FormElements getIBr2FormAccess() {
		return (pIBr2Form != null) ? pIBr2Form : (pIBr2Form = new IBr2FormElements());
	}
	
	public ParserRule getIBr2FormRule() {
		return getIBr2FormAccess().getRule();
	}

	//BExpForm:
	//	addr=INT;
	public BExpFormElements getBExpFormAccess() {
		return (pBExpForm != null) ? pBExpForm : (pBExpForm = new BExpFormElements());
	}
	
	public ParserRule getBExpFormRule() {
		return getBExpFormAccess().getRule();
	}

	//BLabelForm:
	//	label=[Label];
	public BLabelFormElements getBLabelFormAccess() {
		return (pBLabelForm != null) ? pBLabelForm : (pBLabelForm = new BLabelFormElements());
	}
	
	public ParserRule getBLabelFormRule() {
		return getBLabelFormAccess().getRule();
	}

	//SpecialInsn:
	//	insn=(LoadAddress | LoadConstant);
	public SpecialInsnElements getSpecialInsnAccess() {
		return (pSpecialInsn != null) ? pSpecialInsn : (pSpecialInsn = new SpecialInsnElements());
	}
	
	public ParserRule getSpecialInsnRule() {
		return getSpecialInsnAccess().getRule();
	}

	//LoadConstant:
	//	"li" rt=Reg val=INT;
	public LoadConstantElements getLoadConstantAccess() {
		return (pLoadConstant != null) ? pLoadConstant : (pLoadConstant = new LoadConstantElements());
	}
	
	public ParserRule getLoadConstantRule() {
		return getLoadConstantAccess().getRule();
	}

	//LoadAddress:
	//	"la" rt=Reg label=[Label];
	public LoadAddressElements getLoadAddressAccess() {
		return (pLoadAddress != null) ? pLoadAddress : (pLoadAddress = new LoadAddressElements());
	}
	
	public ParserRule getLoadAddressRule() {
		return getLoadAddressAccess().getRule();
	}

	//Reg:
	//	"$" (num=INT | name=ID);
	public RegElements getRegAccess() {
		return (pReg != null) ? pReg : (pReg = new RegElements());
	}
	
	public ParserRule getRegRule() {
		return getRegAccess().getRule();
	}

	//DataSegment:
	//	".data" {DataSegment} items+=DataItem*;
	public DataSegmentElements getDataSegmentAccess() {
		return (pDataSegment != null) ? pDataSegment : (pDataSegment = new DataSegmentElements());
	}
	
	public ParserRule getDataSegmentRule() {
		return getDataSegmentAccess().getRule();
	}

	//DataItem:
	//	label=Label? data=DataDecl;
	public DataItemElements getDataItemAccess() {
		return (pDataItem != null) ? pDataItem : (pDataItem = new DataItemElements());
	}
	
	public ParserRule getDataItemRule() {
		return getDataItemAccess().getRule();
	}

	//DataDecl:
	//	item=(Str | Align | Space | Byte | Half | Word);
	public DataDeclElements getDataDeclAccess() {
		return (pDataDecl != null) ? pDataDecl : (pDataDecl = new DataDeclElements());
	}
	
	public ParserRule getDataDeclRule() {
		return getDataDeclAccess().getRule();
	}

	//Label:
	//	name=ID ":";
	public LabelElements getLabelAccess() {
		return (pLabel != null) ? pLabel : (pLabel = new LabelElements());
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}

	//Align:
	//	".align" align=INT;
	public AlignElements getAlignAccess() {
		return (pAlign != null) ? pAlign : (pAlign = new AlignElements());
	}
	
	public ParserRule getAlignRule() {
		return getAlignAccess().getRule();
	}

	//Space:
	//	".space" bytes=INT;
	public SpaceElements getSpaceAccess() {
		return (pSpace != null) ? pSpace : (pSpace = new SpaceElements());
	}
	
	public ParserRule getSpaceRule() {
		return getSpaceAccess().getRule();
	}

	//Word:
	//	".word" val=IntList;
	public WordElements getWordAccess() {
		return (pWord != null) ? pWord : (pWord = new WordElements());
	}
	
	public ParserRule getWordRule() {
		return getWordAccess().getRule();
	}

	//Half:
	//	".half" val=IntList;
	public HalfElements getHalfAccess() {
		return (pHalf != null) ? pHalf : (pHalf = new HalfElements());
	}
	
	public ParserRule getHalfRule() {
		return getHalfAccess().getRule();
	}

	//Byte:
	//	".byte" val=IntList;
	public ByteElements getByteAccess() {
		return (pByte != null) ? pByte : (pByte = new ByteElements());
	}
	
	public ParserRule getByteRule() {
		return getByteAccess().getRule();
	}

	//Str:
	//	(".asciiz" | ".ascii") val=STRING;
	public StrElements getStrAccess() {
		return (pStr != null) ? pStr : (pStr = new StrElements());
	}
	
	public ParserRule getStrRule() {
		return getStrAccess().getRule();
	}

	//IntList:
	//	vals+=PNInt ("," vals+=PNInt)*;
	public IntListElements getIntListAccess() {
		return (pIntList != null) ? pIntList : (pIntList = new IntListElements());
	}
	
	public ParserRule getIntListRule() {
		return getIntListAccess().getRule();
	}

	//PNInt returns ecore::EInt:
	//	"-"? INT;
	public PNIntElements getPNIntAccess() {
		return (pPNInt != null) ? pPNInt : (pPNInt = new PNIntElements());
	}
	
	public ParserRule getPNIntRule() {
		return getPNIntAccess().getRule();
	}

	//terminal COMMENT:
	//	";" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getCOMMENTRule() {
		return (tCOMMENT != null) ? tCOMMENT : (tCOMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMMENT"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
