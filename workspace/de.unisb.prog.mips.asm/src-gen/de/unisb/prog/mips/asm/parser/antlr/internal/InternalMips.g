/*
* generated by Xtext
*/
grammar InternalMips;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.unisb.prog.mips.asm.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.unisb.prog.mips.asm.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import de.unisb.prog.mips.asm.services.MipsGrammarAccess;

}

@parser::members {

 	private MipsGrammarAccess grammarAccess;
 	
    public InternalMipsParser(TokenStream input, IAstFactory factory, MipsGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("de/unisb/prog/mips/asm/parser/antlr/internal/InternalMips.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Asm";	
   	}
   	
   	@Override
   	protected MipsGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleAsm
entryRuleAsm returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_COMMENT");
	}
	:
	{ currentNode = createCompositeNode(grammarAccess.getAsmRule(), currentNode); }
	 iv_ruleAsm=ruleAsm 
	 { $current=$iv_ruleAsm.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Asm
ruleAsm returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_COMMENT");
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAsmAccess().getElemDataSegmentParserRuleCall_0_0(), currentNode); 
	    }
		lv_elem_0_0=ruleDataSegment		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAsmRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"elem",
	        		lv_elem_0_0, 
	        		"DataSegment", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAsmAccess().getElemTextSegmentParserRuleCall_1_0(), currentNode); 
	    }
		lv_elem_1_0=ruleTextSegment		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAsmRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"elem",
	        		lv_elem_1_0, 
	        		"TextSegment", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleTextSegment
entryRuleTextSegment returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTextSegmentRule(), currentNode); }
	 iv_ruleTextSegment=ruleTextSegment 
	 { $current=$iv_ruleTextSegment.current; } 
	 EOF 
;

// Rule TextSegment
ruleTextSegment returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'.text' 
    {
        createLeafNode(grammarAccess.getTextSegmentAccess().getTextKeyword_0(), null); 
    }
(
    { 
        temp=factory.create(grammarAccess.getTextSegmentAccess().getTextSegmentAction_1().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTextSegmentAccess().getTextSegmentAction_1(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTextSegmentAccess().getItemsTextItemParserRuleCall_2_0(), currentNode); 
	    }
		lv_items_2_0=ruleTextItem		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTextSegmentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"items",
	        		lv_items_2_0, 
	        		"TextItem", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;





// Entry rule entryRuleTextItem
entryRuleTextItem returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTextItemRule(), currentNode); }
	 iv_ruleTextItem=ruleTextItem 
	 { $current=$iv_ruleTextItem.current; } 
	 EOF 
;

// Rule TextItem
ruleTextItem returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTextItemAccess().getLabelLabelParserRuleCall_0_0(), currentNode); 
	    }
		lv_Label_0_0=ruleLabel		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTextItemRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Label",
	        		lv_Label_0_0, 
	        		"Label", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTextItemAccess().getItemInstructionParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_item_1_1=ruleInstruction		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTextItemRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"item",
	        		lv_item_1_1, 
	        		"Instruction", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getTextItemAccess().getItemSpecialInsnParserRuleCall_1_0_1(), currentNode); 
	    }
		lv_item_1_2=ruleSpecialInsn		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTextItemRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"item",
	        		lv_item_1_2, 
	        		"SpecialInsn", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getTextItemAccess().getItemAlignParserRuleCall_1_0_2(), currentNode); 
	    }
		lv_item_1_3=ruleAlign		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTextItemRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"item",
	        		lv_item_1_3, 
	        		"Align", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getTextItemAccess().getItemWordParserRuleCall_1_0_3(), currentNode); 
	    }
		lv_item_1_4=ruleWord		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTextItemRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"item",
	        		lv_item_1_4, 
	        		"Word", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
))
;





// Entry rule entryRuleInstruction
entryRuleInstruction returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInstructionRule(), currentNode); }
	 iv_ruleInstruction=ruleInstruction 
	 { $current=$iv_ruleInstruction.current; } 
	 EOF 
;

// Rule Instruction
ruleInstruction returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_opcode_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getInstructionAccess().getOpcodeIDTerminalRuleCall_0_0(), "opcode"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInstructionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"opcode",
	        		lv_opcode_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInstructionAccess().getFormRFormParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_form_1_1=ruleRForm		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInstructionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"form",
	        		lv_form_1_1, 
	        		"RForm", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getInstructionAccess().getFormIArithFormParserRuleCall_1_0_1(), currentNode); 
	    }
		lv_form_1_2=ruleIArithForm		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInstructionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"form",
	        		lv_form_1_2, 
	        		"IArithForm", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getInstructionAccess().getFormIExpFormParserRuleCall_1_0_2(), currentNode); 
	    }
		lv_form_1_3=ruleIExpForm		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInstructionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"form",
	        		lv_form_1_3, 
	        		"IExpForm", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getInstructionAccess().getFormILabelFormParserRuleCall_1_0_3(), currentNode); 
	    }
		lv_form_1_4=ruleILabelForm		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInstructionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"form",
	        		lv_form_1_4, 
	        		"ILabelForm", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getInstructionAccess().getFormIBr2FormParserRuleCall_1_0_4(), currentNode); 
	    }
		lv_form_1_5=ruleIBr2Form		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInstructionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"form",
	        		lv_form_1_5, 
	        		"IBr2Form", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getInstructionAccess().getFormBExpFormParserRuleCall_1_0_5(), currentNode); 
	    }
		lv_form_1_6=ruleBExpForm		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInstructionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"form",
	        		lv_form_1_6, 
	        		"BExpForm", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getInstructionAccess().getFormBLabelFormParserRuleCall_1_0_6(), currentNode); 
	    }
		lv_form_1_7=ruleBLabelForm		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInstructionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"form",
	        		lv_form_1_7, 
	        		"BLabelForm", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
))
;





// Entry rule entryRuleRForm
entryRuleRForm returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRFormRule(), currentNode); }
	 iv_ruleRForm=ruleRForm 
	 { $current=$iv_ruleRForm.current; } 
	 EOF 
;

// Rule RForm
ruleRForm returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRFormAccess().getRtRegParserRuleCall_0_0(), currentNode); 
	    }
		lv_rt_0_0=ruleReg		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRFormRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rt",
	        		lv_rt_0_0, 
	        		"Reg", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRFormAccess().getRsRegParserRuleCall_1_0(), currentNode); 
	    }
		lv_rs_1_0=ruleReg		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRFormRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rs",
	        		lv_rs_1_0, 
	        		"Reg", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRFormAccess().getRdRegParserRuleCall_2_0(), currentNode); 
	    }
		lv_rd_2_0=ruleReg		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRFormRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rd",
	        		lv_rd_2_0, 
	        		"Reg", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		lv_shamt_3_0=RULE_INT
		{
			createLeafNode(grammarAccess.getRFormAccess().getShamtINTTerminalRuleCall_3_0(), "shamt"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRFormRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"shamt",
	        		lv_shamt_3_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?)
;





// Entry rule entryRuleIArithForm
entryRuleIArithForm returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIArithFormRule(), currentNode); }
	 iv_ruleIArithForm=ruleIArithForm 
	 { $current=$iv_ruleIArithForm.current; } 
	 EOF 
;

// Rule IArithForm
ruleIArithForm returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIArithFormAccess().getRtRegParserRuleCall_0_0(), currentNode); 
	    }
		lv_rt_0_0=ruleReg		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIArithFormRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rt",
	        		lv_rt_0_0, 
	        		"Reg", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIArithFormAccess().getRsRegParserRuleCall_1_0(), currentNode); 
	    }
		lv_rs_1_0=ruleReg		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIArithFormRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rs",
	        		lv_rs_1_0, 
	        		"Reg", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIArithFormAccess().getImmPNIntParserRuleCall_2_0(), currentNode); 
	    }
		lv_imm_2_0=rulePNInt		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIArithFormRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"imm",
	        		lv_imm_2_0, 
	        		"PNInt", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleIExpForm
entryRuleIExpForm returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIExpFormRule(), currentNode); }
	 iv_ruleIExpForm=ruleIExpForm 
	 { $current=$iv_ruleIExpForm.current; } 
	 EOF 
;

// Rule IExpForm
ruleIExpForm returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIExpFormAccess().getRtRegParserRuleCall_0_0(), currentNode); 
	    }
		lv_rt_0_0=ruleReg		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIExpFormRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rt",
	        		lv_rt_0_0, 
	        		"Reg", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIExpFormAccess().getImmPNIntParserRuleCall_1_0(), currentNode); 
	    }
		lv_imm_1_0=rulePNInt		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIExpFormRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"imm",
	        		lv_imm_1_0, 
	        		"PNInt", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getIExpFormAccess().getLeftParenthesisKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIExpFormAccess().getRsRegParserRuleCall_3_0(), currentNode); 
	    }
		lv_rs_3_0=ruleReg		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIExpFormRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rs",
	        		lv_rs_3_0, 
	        		"Reg", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getIExpFormAccess().getRightParenthesisKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleILabelForm
entryRuleILabelForm returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getILabelFormRule(), currentNode); }
	 iv_ruleILabelForm=ruleILabelForm 
	 { $current=$iv_ruleILabelForm.current; } 
	 EOF 
;

// Rule ILabelForm
ruleILabelForm returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getILabelFormAccess().getRegRegParserRuleCall_0_0(), currentNode); 
	    }
		lv_reg_0_0=ruleReg		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getILabelFormRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"reg",
	        		lv_reg_0_0, 
	        		"Reg", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getILabelFormRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getILabelFormAccess().getLabelLabelCrossReference_1_0(), "label"); 
	}

)
))
;





// Entry rule entryRuleIBr2Form
entryRuleIBr2Form returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIBr2FormRule(), currentNode); }
	 iv_ruleIBr2Form=ruleIBr2Form 
	 { $current=$iv_ruleIBr2Form.current; } 
	 EOF 
;

// Rule IBr2Form
ruleIBr2Form returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIBr2FormAccess().getRtRegParserRuleCall_0_0(), currentNode); 
	    }
		lv_rt_0_0=ruleReg		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIBr2FormRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rt",
	        		lv_rt_0_0, 
	        		"Reg", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIBr2FormAccess().getRsRegParserRuleCall_1_0(), currentNode); 
	    }
		lv_rs_1_0=ruleReg		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIBr2FormRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rs",
	        		lv_rs_1_0, 
	        		"Reg", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getIBr2FormRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getIBr2FormAccess().getLabelLabelCrossReference_2_0(), "label"); 
	}

)
))
;





// Entry rule entryRuleBExpForm
entryRuleBExpForm returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBExpFormRule(), currentNode); }
	 iv_ruleBExpForm=ruleBExpForm 
	 { $current=$iv_ruleBExpForm.current; } 
	 EOF 
;

// Rule BExpForm
ruleBExpForm returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_addr_0_0=RULE_INT
		{
			createLeafNode(grammarAccess.getBExpFormAccess().getAddrINTTerminalRuleCall_0(), "addr"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBExpFormRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"addr",
	        		lv_addr_0_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleBLabelForm
entryRuleBLabelForm returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBLabelFormRule(), currentNode); }
	 iv_ruleBLabelForm=ruleBLabelForm 
	 { $current=$iv_ruleBLabelForm.current; } 
	 EOF 
;

// Rule BLabelForm
ruleBLabelForm returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getBLabelFormRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getBLabelFormAccess().getLabelLabelCrossReference_0(), "label"); 
	}

)
)
;





// Entry rule entryRuleSpecialInsn
entryRuleSpecialInsn returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSpecialInsnRule(), currentNode); }
	 iv_ruleSpecialInsn=ruleSpecialInsn 
	 { $current=$iv_ruleSpecialInsn.current; } 
	 EOF 
;

// Rule SpecialInsn
ruleSpecialInsn returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSpecialInsnAccess().getInsnLoadAddressParserRuleCall_0_0(), currentNode); 
	    }
		lv_insn_0_1=ruleLoadAddress		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSpecialInsnRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"insn",
	        		lv_insn_0_1, 
	        		"LoadAddress", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getSpecialInsnAccess().getInsnLoadConstantParserRuleCall_0_1(), currentNode); 
	    }
		lv_insn_0_2=ruleLoadConstant		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSpecialInsnRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"insn",
	        		lv_insn_0_2, 
	        		"LoadConstant", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
)
;





// Entry rule entryRuleLoadConstant
entryRuleLoadConstant returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLoadConstantRule(), currentNode); }
	 iv_ruleLoadConstant=ruleLoadConstant 
	 { $current=$iv_ruleLoadConstant.current; } 
	 EOF 
;

// Rule LoadConstant
ruleLoadConstant returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'li' 
    {
        createLeafNode(grammarAccess.getLoadConstantAccess().getLiKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLoadConstantAccess().getRtRegParserRuleCall_1_0(), currentNode); 
	    }
		lv_rt_1_0=ruleReg		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLoadConstantRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rt",
	        		lv_rt_1_0, 
	        		"Reg", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		lv_val_2_0=RULE_INT
		{
			createLeafNode(grammarAccess.getLoadConstantAccess().getValINTTerminalRuleCall_2_0(), "val"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLoadConstantRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"val",
	        		lv_val_2_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleLoadAddress
entryRuleLoadAddress returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLoadAddressRule(), currentNode); }
	 iv_ruleLoadAddress=ruleLoadAddress 
	 { $current=$iv_ruleLoadAddress.current; } 
	 EOF 
;

// Rule LoadAddress
ruleLoadAddress returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'la' 
    {
        createLeafNode(grammarAccess.getLoadAddressAccess().getLaKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLoadAddressAccess().getRtRegParserRuleCall_1_0(), currentNode); 
	    }
		lv_rt_1_0=ruleReg		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLoadAddressRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rt",
	        		lv_rt_1_0, 
	        		"Reg", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getLoadAddressRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getLoadAddressAccess().getLabelLabelCrossReference_2_0(), "label"); 
	}

)
))
;





// Entry rule entryRuleReg
entryRuleReg returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRegRule(), currentNode); }
	 iv_ruleReg=ruleReg 
	 { $current=$iv_ruleReg.current; } 
	 EOF 
;

// Rule Reg
ruleReg returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'$' 
    {
        createLeafNode(grammarAccess.getRegAccess().getDollarSignKeyword_0(), null); 
    }
((
(
		lv_num_1_0=RULE_INT
		{
			createLeafNode(grammarAccess.getRegAccess().getNumINTTerminalRuleCall_1_0_0(), "num"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRegRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"num",
	        		lv_num_1_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_name_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getRegAccess().getNameIDTerminalRuleCall_1_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRegRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)))
;





// Entry rule entryRuleDataSegment
entryRuleDataSegment returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDataSegmentRule(), currentNode); }
	 iv_ruleDataSegment=ruleDataSegment 
	 { $current=$iv_ruleDataSegment.current; } 
	 EOF 
;

// Rule DataSegment
ruleDataSegment returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'.data' 
    {
        createLeafNode(grammarAccess.getDataSegmentAccess().getDataKeyword_0(), null); 
    }
(
    { 
        temp=factory.create(grammarAccess.getDataSegmentAccess().getDataSegmentAction_1().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getDataSegmentAccess().getDataSegmentAction_1(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDataSegmentAccess().getItemsDataItemParserRuleCall_2_0(), currentNode); 
	    }
		lv_items_2_0=ruleDataItem		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataSegmentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"items",
	        		lv_items_2_0, 
	        		"DataItem", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;





// Entry rule entryRuleDataItem
entryRuleDataItem returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDataItemRule(), currentNode); }
	 iv_ruleDataItem=ruleDataItem 
	 { $current=$iv_ruleDataItem.current; } 
	 EOF 
;

// Rule DataItem
ruleDataItem returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDataItemAccess().getLabelLabelParserRuleCall_0_0(), currentNode); 
	    }
		lv_label_0_0=ruleLabel		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataItemRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"label",
	        		lv_label_0_0, 
	        		"Label", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDataItemAccess().getDataDataDeclParserRuleCall_1_0(), currentNode); 
	    }
		lv_data_1_0=ruleDataDecl		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataItemRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"data",
	        		lv_data_1_0, 
	        		"DataDecl", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleDataDecl
entryRuleDataDecl returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDataDeclRule(), currentNode); }
	 iv_ruleDataDecl=ruleDataDecl 
	 { $current=$iv_ruleDataDecl.current; } 
	 EOF 
;

// Rule DataDecl
ruleDataDecl returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDataDeclAccess().getItemStrParserRuleCall_0_0(), currentNode); 
	    }
		lv_item_0_1=ruleStr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"item",
	        		lv_item_0_1, 
	        		"Str", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getDataDeclAccess().getItemAlignParserRuleCall_0_1(), currentNode); 
	    }
		lv_item_0_2=ruleAlign		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"item",
	        		lv_item_0_2, 
	        		"Align", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getDataDeclAccess().getItemSpaceParserRuleCall_0_2(), currentNode); 
	    }
		lv_item_0_3=ruleSpace		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"item",
	        		lv_item_0_3, 
	        		"Space", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getDataDeclAccess().getItemByteParserRuleCall_0_3(), currentNode); 
	    }
		lv_item_0_4=ruleByte		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"item",
	        		lv_item_0_4, 
	        		"Byte", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getDataDeclAccess().getItemHalfParserRuleCall_0_4(), currentNode); 
	    }
		lv_item_0_5=ruleHalf		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"item",
	        		lv_item_0_5, 
	        		"Half", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getDataDeclAccess().getItemWordParserRuleCall_0_5(), currentNode); 
	    }
		lv_item_0_6=ruleWord		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"item",
	        		lv_item_0_6, 
	        		"Word", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
)
;





// Entry rule entryRuleLabel
entryRuleLabel returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLabelRule(), currentNode); }
	 iv_ruleLabel=ruleLabel 
	 { $current=$iv_ruleLabel.current; } 
	 EOF 
;

// Rule Label
ruleLabel returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getLabelAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLabelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getLabelAccess().getColonKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleAlign
entryRuleAlign returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAlignRule(), currentNode); }
	 iv_ruleAlign=ruleAlign 
	 { $current=$iv_ruleAlign.current; } 
	 EOF 
;

// Rule Align
ruleAlign returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'.align' 
    {
        createLeafNode(grammarAccess.getAlignAccess().getAlignKeyword_0(), null); 
    }
(
(
		lv_align_1_0=RULE_INT
		{
			createLeafNode(grammarAccess.getAlignAccess().getAlignINTTerminalRuleCall_1_0(), "align"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAlignRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"align",
	        		lv_align_1_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleSpace
entryRuleSpace returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSpaceRule(), currentNode); }
	 iv_ruleSpace=ruleSpace 
	 { $current=$iv_ruleSpace.current; } 
	 EOF 
;

// Rule Space
ruleSpace returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'.space' 
    {
        createLeafNode(grammarAccess.getSpaceAccess().getSpaceKeyword_0(), null); 
    }
(
(
		lv_bytes_1_0=RULE_INT
		{
			createLeafNode(grammarAccess.getSpaceAccess().getBytesINTTerminalRuleCall_1_0(), "bytes"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSpaceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"bytes",
	        		lv_bytes_1_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleWord
entryRuleWord returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getWordRule(), currentNode); }
	 iv_ruleWord=ruleWord 
	 { $current=$iv_ruleWord.current; } 
	 EOF 
;

// Rule Word
ruleWord returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'.word' 
    {
        createLeafNode(grammarAccess.getWordAccess().getWordKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWordAccess().getValIntListParserRuleCall_1_0(), currentNode); 
	    }
		lv_val_1_0=ruleIntList		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWordRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"val",
	        		lv_val_1_0, 
	        		"IntList", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleHalf
entryRuleHalf returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getHalfRule(), currentNode); }
	 iv_ruleHalf=ruleHalf 
	 { $current=$iv_ruleHalf.current; } 
	 EOF 
;

// Rule Half
ruleHalf returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'.half' 
    {
        createLeafNode(grammarAccess.getHalfAccess().getHalfKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getHalfAccess().getValIntListParserRuleCall_1_0(), currentNode); 
	    }
		lv_val_1_0=ruleIntList		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getHalfRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"val",
	        		lv_val_1_0, 
	        		"IntList", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleByte
entryRuleByte returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getByteRule(), currentNode); }
	 iv_ruleByte=ruleByte 
	 { $current=$iv_ruleByte.current; } 
	 EOF 
;

// Rule Byte
ruleByte returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'.byte' 
    {
        createLeafNode(grammarAccess.getByteAccess().getByteKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getByteAccess().getValIntListParserRuleCall_1_0(), currentNode); 
	    }
		lv_val_1_0=ruleIntList		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getByteRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"val",
	        		lv_val_1_0, 
	        		"IntList", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleStr
entryRuleStr returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStrRule(), currentNode); }
	 iv_ruleStr=ruleStr 
	 { $current=$iv_ruleStr.current; } 
	 EOF 
;

// Rule Str
ruleStr returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'.asciiz' 
    {
        createLeafNode(grammarAccess.getStrAccess().getAsciizKeyword_0_0(), null); 
    }

    |	'.ascii' 
    {
        createLeafNode(grammarAccess.getStrAccess().getAsciiKeyword_0_1(), null); 
    }
)(
(
		lv_val_2_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getStrAccess().getValSTRINGTerminalRuleCall_1_0(), "val"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStrRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"val",
	        		lv_val_2_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleIntList
entryRuleIntList returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIntListRule(), currentNode); }
	 iv_ruleIntList=ruleIntList 
	 { $current=$iv_ruleIntList.current; } 
	 EOF 
;

// Rule IntList
ruleIntList returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIntListAccess().getValsPNIntParserRuleCall_0_0(), currentNode); 
	    }
		lv_vals_0_0=rulePNInt		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"vals",
	        		lv_vals_0_0, 
	        		"PNInt", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getIntListAccess().getCommaKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIntListAccess().getValsPNIntParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_vals_2_0=rulePNInt		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"vals",
	        		lv_vals_2_0, 
	        		"PNInt", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRulePNInt
entryRulePNInt returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPNIntRule(), currentNode); } 
	 iv_rulePNInt=rulePNInt 
	 { $current=$iv_rulePNInt.current.getText(); }  
	 EOF 
;

// Rule PNInt
rulePNInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
((
	kw='-' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPNIntAccess().getHyphenMinusKeyword_0(), null); 
    }
)?    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    createLeafNode(grammarAccess.getPNIntAccess().getINTTerminalRuleCall_1(), null); 
    }
)
    ;





RULE_COMMENT : ';' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


